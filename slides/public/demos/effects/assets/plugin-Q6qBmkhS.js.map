{"version":3,"file":"plugin-Q6qBmkhS.js","sources":["../../node_modules/.pnpm/babel-import-util@3.0.1/node_modules/babel-import-util/src/sanitize.js","../../node_modules/.pnpm/babel-import-util@3.0.1/node_modules/babel-import-util/src/index.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/hbs-utils.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/read-only-array.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/scope-locals.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/expression-parser.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/js-utils.js","../../node_modules/.pnpm/babel-plugin-ember-template-compilation@2.4.1/node_modules/babel-plugin-ember-template-compilation/src/plugin.js"],"sourcesContent":["\"use strict\";\n// make a name into a valid javascript identifier, as pleasantly as possible.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitize = void 0;\nfunction sanitize(identifier) {\n    // first we opportunistically do camelization when an illegal character is not\n    // the first character and is followed by a lowercase letter, in an effort to\n    // aid readability of the output.\n    let cleaned = identifier.replace(new RegExp(`(?<!^)(?:${illegalChar.source})([a-z])`, 'g'), (_m, letter) => letter.toUpperCase());\n    // then we unliterally strip all remaining illegal characters.\n    cleaned = cleaned.replace(new RegExp(illegalChar.source, 'g'), '');\n    return cleaned;\n}\nexports.sanitize = sanitize;\nconst illegalChar = /^[^a-zA-Z_$]|(?<=.)[^a-zA-Z_$0-9]/;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzYW5pdGl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkVBQTZFOzs7QUFFN0UsU0FBZ0IsUUFBUSxDQUFDLFVBQWtCO0lBQ3pDLDhFQUE4RTtJQUM5RSw2RUFBNkU7SUFDN0UsaUNBQWlDO0lBQ2pDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQzlCLElBQUksTUFBTSxDQUFDLFlBQVksV0FBVyxDQUFDLE1BQU0sVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUN6RCxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FDckMsQ0FBQztJQUNGLDhEQUE4RDtJQUM5RCxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFYRCw0QkFXQztBQUVELE1BQU0sV0FBVyxHQUFHLG1DQUFtQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbWFrZSBhIG5hbWUgaW50byBhIHZhbGlkIGphdmFzY3JpcHQgaWRlbnRpZmllciwgYXMgcGxlYXNhbnRseSBhcyBwb3NzaWJsZS5cblxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplKGlkZW50aWZpZXI6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIGZpcnN0IHdlIG9wcG9ydHVuaXN0aWNhbGx5IGRvIGNhbWVsaXphdGlvbiB3aGVuIGFuIGlsbGVnYWwgY2hhcmFjdGVyIGlzIG5vdFxuICAvLyB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCBpcyBmb2xsb3dlZCBieSBhIGxvd2VyY2FzZSBsZXR0ZXIsIGluIGFuIGVmZm9ydCB0b1xuICAvLyBhaWQgcmVhZGFiaWxpdHkgb2YgdGhlIG91dHB1dC5cbiAgbGV0IGNsZWFuZWQgPSBpZGVudGlmaWVyLnJlcGxhY2UoXG4gICAgbmV3IFJlZ0V4cChgKD88IV4pKD86JHtpbGxlZ2FsQ2hhci5zb3VyY2V9KShbYS16XSlgLCAnZycpLFxuICAgIChfbSwgbGV0dGVyKSA9PiBsZXR0ZXIudG9VcHBlckNhc2UoKVxuICApO1xuICAvLyB0aGVuIHdlIHVubGl0ZXJhbGx5IHN0cmlwIGFsbCByZW1haW5pbmcgaWxsZWdhbCBjaGFyYWN0ZXJzLlxuICBjbGVhbmVkID0gY2xlYW5lZC5yZXBsYWNlKG5ldyBSZWdFeHAoaWxsZWdhbENoYXIuc291cmNlLCAnZycpLCAnJyk7XG4gIHJldHVybiBjbGVhbmVkO1xufVxuXG5jb25zdCBpbGxlZ2FsQ2hhciA9IC9eW15hLXpBLVpfJF18KD88PS4pW15hLXpBLVpfJDAtOV0vO1xuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportUtil = void 0;\nconst sanitize_1 = require(\"./sanitize\");\nclass ImportUtil {\n    constructor(babel, program) {\n        this.babel = babel;\n        this.program = program;\n        this.t = babel.types;\n    }\n    // remove one imported binding. If this is the last thing imported from the\n    // given moduleSpecifier, the whole statement will also be removed.\n    removeImport(moduleSpecifier, exportedName) {\n        for (let topLevelPath of this.program.get('body')) {\n            if (!matchModule(topLevelPath, moduleSpecifier)) {\n                continue;\n            }\n            let importSpecifierPath = topLevelPath\n                .get('specifiers')\n                .find((specifierPath) => matchSpecifier(specifierPath, exportedName));\n            if (importSpecifierPath) {\n                if (topLevelPath.node.specifiers.length === 1) {\n                    topLevelPath.remove();\n                }\n                else {\n                    importSpecifierPath.remove();\n                }\n            }\n        }\n    }\n    // remove all imports from the given moduleSpecifier\n    removeAllImports(moduleSpecifier) {\n        for (let topLevelPath of this.program.get('body')) {\n            if (matchModule(topLevelPath, moduleSpecifier)) {\n                topLevelPath.remove();\n            }\n        }\n    }\n    // Import the given value (if needed) and return an Identifier representing\n    // it.\n    //\n    // This method is trickier to use safely than our higher-level methods\n    // (`insertAfter`, `insertBefore`, `replaceWith`, `mutate`) because after you\n    // insert the identifier into the AST, it's up to you to ensure that babel's\n    // scope system is aware of the new reference. The other methods do that for\n    // you automatically.\n    import(\n    // the spot at which you will insert the Identifier we return to you\n    target, \n    // the path to the module you're importing from\n    moduleSpecifier, \n    // the name you're importing from that module. Use \"default\" for the default\n    // export. Use \"*\" for the namespace.\n    exportedName, \n    // Optional hint for helping us pick a name for the imported binding\n    nameHint) {\n        return this.unreferencedImport(target, moduleSpecifier, exportedName, desiredName(nameHint, exportedName, defaultNameHint(target)));\n    }\n    // Import the given value (if needed) and return an Identifier representing\n    // it.\n    unreferencedImport(\n    // the spot at which you will insert the Identifier we return to you\n    target, \n    // the path to the module you're importing from\n    moduleSpecifier, \n    // the name you're importing from that module. Use \"default\" for the default\n    // export. Use \"*\" for the namespace.\n    exportedName, \n    // the preferred name you want, if we neeed to create a new binding. You\n    // might get something similar instead, to avoid collisions.\n    preferredName) {\n        var _a;\n        let isNamespaceImport = exportedName === '*';\n        let isDefaultImport = exportedName === 'default';\n        let isNamedImport = !isDefaultImport && !isNamespaceImport;\n        let declaration = this.findImportFrom(moduleSpecifier);\n        let hasNamespaceSpecifier = declaration === null || declaration === void 0 ? void 0 : declaration.node.specifiers.find((s) => s.type === 'ImportNamespaceSpecifier');\n        let hasNamedSpecifiers = declaration === null || declaration === void 0 ? void 0 : declaration.node.specifiers.find((s) => s.type === 'ImportSpecifier');\n        /**\n         * the file has a preexisting non-namespace import and a transform tries to add a namespace import, so they don't get combined\n         * the file has a preexisting namespace import and a transform tries to add a non-namespace import, so they don't get combined\n         * the file has a preexisting namespace import and a transform tries to add a namespace import, so they don't get combined\n         */\n        let cannotUseExistingDeclaration = (hasNamedSpecifiers && isNamespaceImport) ||\n            (hasNamespaceSpecifier && isNamedImport) ||\n            (hasNamespaceSpecifier && isNamespaceImport);\n        if (!cannotUseExistingDeclaration && declaration) {\n            let specifier = declaration\n                .get('specifiers')\n                .find((spec) => matchSpecifier(spec, exportedName));\n            if (specifier && ((_a = target.scope.getBinding(specifier.node.local.name)) === null || _a === void 0 ? void 0 : _a.kind) === 'module') {\n                return this.t.identifier(specifier.node.local.name);\n            }\n            else {\n                return this.addSpecifier(target, declaration, exportedName, preferredName);\n            }\n        }\n        else {\n            let declaration = this.insertAfterExistingImports(this.t.importDeclaration([], this.t.stringLiteral(moduleSpecifier)));\n            return this.addSpecifier(target, declaration, exportedName, preferredName);\n        }\n    }\n    importForSideEffect(moduleSpecifier) {\n        let declaration = this.findImportFrom(moduleSpecifier);\n        if (!declaration) {\n            this.insertAfterExistingImports(this.t.importDeclaration([], this.t.stringLiteral(moduleSpecifier)));\n        }\n    }\n    replaceWith(target, fn) {\n        return this.mutate((i) => {\n            target.replaceWith(fn(i));\n            // the return value of replaceWith is not a reliable way to get the\n            // updated path, at least in the case where the user replaced an\n            // expression with a statement. Instead we will rely on the fact that path\n            // replacement also mutates its argument, so `target` now points at the\n            // newly replaced path.\n            return target;\n        }, defaultNameHint(target));\n    }\n    insertAfter(target, fn) {\n        return this.mutate((i) => target.insertAfter(fn(i))[0], defaultNameHint(target));\n    }\n    insertBefore(target, fn) {\n        return this.mutate((i) => target.insertBefore(fn(i))[0], defaultNameHint(target));\n    }\n    // Low-level method for when you don't want to use our higher-level methods\n    // (replaceWith, insertBefore, insertAfter)\n    mutate(fn, defaultNameHint) {\n        let symbols = new Map();\n        const importer = {\n            import: (moduleSpecifier, exportedName, nameHint) => {\n                let identifier = this.t.identifier('__babel_import_util_placeholder__');\n                symbols.set(identifier, { moduleSpecifier, exportedName, nameHint });\n                return identifier;\n            },\n        };\n        const updateReference = (path) => {\n            if (!path.isIdentifier()) {\n                return;\n            }\n            let hit = symbols.get(path.node);\n            if (hit) {\n                let newIdentifier = this.unreferencedImport(path, hit.moduleSpecifier, hit.exportedName, desiredName(hit.nameHint, hit.exportedName, defaultNameHint));\n                path.replaceWith(newIdentifier);\n                let binding = path.scope.getBinding(newIdentifier.name);\n                if (!binding) {\n                    // we create the binding at the point where we add the import, so this\n                    // would indicate broken behavior\n                    throw new Error(`bug: this is supposed to never happen`);\n                }\n                binding.reference(path);\n            }\n        };\n        let result = fn(importer);\n        updateReference(result);\n        this.babel.traverse(result.node, {\n            ReferencedIdentifier: (path) => {\n                updateReference(path);\n            },\n        }, result.scope, {}, result);\n        return result;\n    }\n    addSpecifier(target, declaration, exportedName, preferredName) {\n        let local = this.t.identifier(unusedNameLike(target, preferredName));\n        let specifier = this.buildSpecifier(exportedName, local);\n        let added;\n        if (specifier.type === 'ImportDefaultSpecifier') {\n            declaration.node.specifiers.unshift(specifier);\n            added = declaration.get(`specifiers.0`);\n        }\n        else {\n            declaration.node.specifiers.push(specifier);\n            added = declaration.get(`specifiers.${declaration.node.specifiers.length - 1}`);\n        }\n        declaration.scope.registerBinding('module', added);\n        return local;\n    }\n    buildSpecifier(exportedName, localName) {\n        switch (exportedName) {\n            case 'default':\n                return this.t.importDefaultSpecifier(localName);\n            case '*':\n                return this.t.importNamespaceSpecifier(localName);\n            default:\n                return this.t.importSpecifier(localName, this.t.identifier(exportedName));\n        }\n    }\n    findImportFrom(moduleSpecifier) {\n        for (let path of this.program.get('body')) {\n            if (path.isImportDeclaration() &&\n                path.node.source.value === moduleSpecifier &&\n                path.node.importKind !== 'type') {\n                return path;\n            }\n        }\n        return undefined;\n    }\n    insertAfterExistingImports(statement) {\n        let lastIndex;\n        for (let [index, node] of this.program.node.body.entries()) {\n            if (node.type === 'ImportDeclaration') {\n                lastIndex = index;\n            }\n        }\n        if (lastIndex == null) {\n            // we are intentionally not using babel's container-aware methods, because\n            // while in theory it's nice that they schedule other plugins to run on\n            // our nodes, in practice those nodes might get mutated or removed by some\n            // other plugin in the intervening time causing failures.\n            this.program.node.body.unshift(statement);\n            return this.program.get('body.0');\n        }\n        else {\n            this.program.node.body.splice(lastIndex + 1, 0, statement);\n            return this.program.get(`body.${lastIndex + 1}`);\n        }\n    }\n}\nexports.ImportUtil = ImportUtil;\nfunction unusedNameLike(path, name) {\n    let candidate = name;\n    let counter = 0;\n    while (path.scope.hasBinding(candidate)) {\n        candidate = `${name}${counter++}`;\n    }\n    return candidate;\n}\nfunction name(node) {\n    if (node.type === 'StringLiteral') {\n        return node.value;\n    }\n    else {\n        return node.name;\n    }\n}\nfunction desiredName(nameHint, exportedName, defaultNameHint) {\n    if (nameHint) {\n        return (0, sanitize_1.sanitize)(nameHint);\n    }\n    if (exportedName === 'default' || exportedName === '*') {\n        return defaultNameHint !== null && defaultNameHint !== void 0 ? defaultNameHint : 'a';\n    }\n    else {\n        return exportedName;\n    }\n}\nfunction defaultNameHint(target) {\n    if (target === null || target === void 0 ? void 0 : target.isIdentifier()) {\n        return target.node.name;\n    }\n    else if (target) {\n        return target.scope.generateUidIdentifierBasedOnNode(target.node).name;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction matchSpecifier(spec, exportedName) {\n    switch (exportedName) {\n        case 'default':\n            return spec.isImportDefaultSpecifier();\n        case '*':\n            return spec.isImportNamespaceSpecifier();\n        default:\n            return spec.isImportSpecifier() && name(spec.node.imported) === exportedName;\n    }\n}\nfunction matchModule(path, moduleSpecifier) {\n    return path.isImportDeclaration() && path.get('source').node.value === moduleSpecifier;\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.astNodeHasBinding = astNodeHasBinding;\nfunction astNodeHasBinding(target, name) {\n    var _a;\n    let cursor = target;\n    while (cursor) {\n        let parentNode = (_a = cursor.parent) === null || _a === void 0 ? void 0 : _a.node;\n        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === 'ElementNode' &&\n            parentNode.blockParams.includes(name) &&\n            // an ElementNode's block params are valid only within its children\n            parentNode.children.includes(cursor.node)) {\n            return true;\n        }\n        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === 'Block' &&\n            parentNode.blockParams.includes(name) &&\n            // a Block's blockParams are valid only within its body\n            parentNode.body.includes(cursor.node)) {\n            return true;\n        }\n        cursor = cursor.parent;\n    }\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGJzLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGJzLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsOENBeUJDO0FBekJELFNBQWdCLGlCQUFpQixDQUFDLE1BQThCLEVBQUUsSUFBWTs7SUFDNUUsSUFBSSxNQUFNLEdBQWtDLE1BQU0sQ0FBQztJQUNuRCxPQUFPLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxVQUFVLEdBQUcsTUFBQSxNQUFNLENBQUMsTUFBTSwwQ0FBRSxJQUFJLENBQUM7UUFDckMsSUFDRSxDQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxJQUFJLE1BQUssYUFBYTtZQUNsQyxVQUFVLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDckMsbUVBQW1FO1lBQ25FLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUF1QixDQUFDLEVBQzVELENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxJQUNFLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLElBQUksTUFBSyxPQUFPO1lBQzVCLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNyQyx1REFBdUQ7WUFDdkQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQXVCLENBQUMsRUFDeEQsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEFTVHYxLCBXYWxrZXJQYXRoIH0gZnJvbSAnQGdsaW1tZXIvc3ludGF4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzdE5vZGVIYXNCaW5kaW5nKHRhcmdldDogV2Fsa2VyUGF0aDxBU1R2MS5Ob2RlPiwgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGxldCBjdXJzb3I6IFdhbGtlclBhdGg8QVNUdjEuTm9kZT4gfCBudWxsID0gdGFyZ2V0O1xuICB3aGlsZSAoY3Vyc29yKSB7XG4gICAgbGV0IHBhcmVudE5vZGUgPSBjdXJzb3IucGFyZW50Py5ub2RlO1xuICAgIGlmIChcbiAgICAgIHBhcmVudE5vZGU/LnR5cGUgPT09ICdFbGVtZW50Tm9kZScgJiZcbiAgICAgIHBhcmVudE5vZGUuYmxvY2tQYXJhbXMuaW5jbHVkZXMobmFtZSkgJiZcbiAgICAgIC8vIGFuIEVsZW1lbnROb2RlJ3MgYmxvY2sgcGFyYW1zIGFyZSB2YWxpZCBvbmx5IHdpdGhpbiBpdHMgY2hpbGRyZW5cbiAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4uaW5jbHVkZXMoY3Vyc29yLm5vZGUgYXMgQVNUdjEuU3RhdGVtZW50KVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcGFyZW50Tm9kZT8udHlwZSA9PT0gJ0Jsb2NrJyAmJlxuICAgICAgcGFyZW50Tm9kZS5ibG9ja1BhcmFtcy5pbmNsdWRlcyhuYW1lKSAmJlxuICAgICAgLy8gYSBCbG9jaydzIGJsb2NrUGFyYW1zIGFyZSB2YWxpZCBvbmx5IHdpdGhpbiBpdHMgYm9keVxuICAgICAgcGFyZW50Tm9kZS5ib2R5LmluY2x1ZGVzKGN1cnNvci5ub2RlIGFzIEFTVHYxLlN0YXRlbWVudClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnNvciA9IGN1cnNvci5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readOnlyArray = readOnlyArray;\nconst mutationMethods = [\n    'copyWithin',\n    'fill',\n    'pop',\n    'push',\n    'reverse',\n    'shift',\n    'sort',\n    'splice',\n    'unshift',\n];\nfunction readOnlyArray(array, message = 'Forbidden array mutation') {\n    return new Proxy(array, {\n        get(target, prop) {\n            if (typeof prop === 'string' && mutationMethods.includes(prop)) {\n                return () => {\n                    throw new Error(message);\n                };\n            }\n            return Reflect.get(target, prop);\n        },\n        set(_target, _prop) {\n            throw new Error(message);\n        },\n        deleteProperty() {\n            throw new Error(message);\n        },\n    });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1vbmx5LWFycmF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVhZC1vbmx5LWFycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBWUEsc0NBaUJDO0FBN0JELE1BQU0sZUFBZSxHQUFHO0lBQ3RCLFlBQVk7SUFDWixNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztDQUNWLENBQUM7QUFFRixTQUFnQixhQUFhLENBQUksS0FBVSxFQUFFLE9BQU8sR0FBRywwQkFBMEI7SUFDL0UsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7UUFDdEIsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJO1lBQ2QsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUMvRCxPQUFPLEdBQUcsRUFBRTtvQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzQixDQUFDLENBQUM7WUFDSixDQUFDO1lBQ0QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxDQUFDO1FBQ0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQztRQUNELGNBQWM7WUFDWixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbXV0YXRpb25NZXRob2RzID0gW1xuICAnY29weVdpdGhpbicsXG4gICdmaWxsJyxcbiAgJ3BvcCcsXG4gICdwdXNoJyxcbiAgJ3JldmVyc2UnLFxuICAnc2hpZnQnLFxuICAnc29ydCcsXG4gICdzcGxpY2UnLFxuICAndW5zaGlmdCcsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhZE9ubHlBcnJheTxUPihhcnJheTogVFtdLCBtZXNzYWdlID0gJ0ZvcmJpZGRlbiBhcnJheSBtdXRhdGlvbicpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShhcnJheSwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbXV0YXRpb25NZXRob2RzLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCk7XG4gICAgfSxcbiAgICBzZXQoX3RhcmdldCwgX3Byb3ApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5KCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0sXG4gIH0pO1xufVxuIl19","\"use strict\";\n/*\n  This class exists because:\n   - before template compilation starts, we need to pass a `locals` array to\n     ember-template-compiler\n   - the JSUtils API can mutate the scope during template compilation\n   - those scope mutations need to update both the original `locals` array and\n     our own name mapping, keeping them in sync.\n*/\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ScopeLocals_instances, _ScopeLocals_mapping, _ScopeLocals_locals, _ScopeLocals_params, _ScopeLocals_isInJsScope;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScopeLocals = exports.ALLOWED_GLOBALS = void 0;\nconst hbs_utils_1 = require(\"./hbs-utils\");\nconst read_only_array_1 = require(\"./read-only-array\");\n/**\n * RFC: https://github.com/emberjs/rfcs/pull/1070\n *\n * Criteria for inclusion in this list:\n *\n *   Any of:\n *     - begins with an uppercase letter\n *     - guaranteed to never be added to glimmer as a keyword (e.g.: globalThis)\n *\n *   And:\n *     - must not need new to invoke\n *     - must not require lifetime management (e.g.: setTimeout)\n *     - must not be a single-word lower-case API, because of potential collision with future new HTML elements\n *     - if the API is a function, the return value should not be a promise\n *     - must be one one of these lists:\n *        - https://tc39.es/ecma262/#sec-global-object\n *        - https://tc39.es/ecma262/#sec-function-properties-of-the-global-object\n *        - https://html.spec.whatwg.org/multipage/nav-history-apis.html#window\n *        - https://html.spec.whatwg.org/multipage/indices.html#all-interfaces\n *        - https://html.spec.whatwg.org/multipage/webappapis.html\n */\nexports.ALLOWED_GLOBALS = new Set([\n    // ////////////////\n    // namespaces\n    // ////////////////\n    //   TC39\n    'globalThis',\n    'Atomics',\n    'JSON',\n    'Math',\n    'Reflect',\n    //   WHATWG\n    'localStorage',\n    'sessionStorage',\n    // ////////////////\n    // functions / utilities\n    // ////////////////\n    //   TC39\n    'isNaN',\n    'isFinite',\n    'parseInt',\n    'parseFloat',\n    'decodeURI',\n    'decodeURIComponent',\n    'encodeURI',\n    'encodeURIComponent',\n    //   WHATWG\n    'postMessage',\n    'structuredClone',\n    // ////////////////\n    // new-less Constructors (still functions)\n    // ////////////////\n    //   TC39\n    'Array', // different behavior from (array)\n    'BigInt',\n    'Boolean',\n    'Date',\n    'Number',\n    'Object', // different behavior from (hash)\n    'String',\n    // ////////////////\n    // Values\n    // ////////////////\n    //   TC39\n    'Infinity',\n    'NaN',\n    //   WHATWG\n    'isSecureContext',\n]);\nclass ScopeLocals {\n    constructor(params) {\n        _ScopeLocals_instances.add(this);\n        _ScopeLocals_mapping.set(this, {});\n        _ScopeLocals_locals.set(this, []);\n        _ScopeLocals_params.set(this, void 0);\n        __classPrivateFieldSet(this, _ScopeLocals_params, params, \"f\");\n    }\n    get locals() {\n        return (0, read_only_array_1.readOnlyArray)(__classPrivateFieldGet(this, _ScopeLocals_locals, \"f\"), 'The only supported way to manipulate locals is via the jsutils API\\nhttps://github.com/emberjs/babel-plugin-ember-template-compilation#jsutils-manipulating-javascript-from-within-ast-transforms');\n    }\n    has(key) {\n        return key in __classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\");\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\")[key];\n    }\n    isEmpty() {\n        return __classPrivateFieldGet(this, _ScopeLocals_locals, \"f\").length === 0;\n    }\n    entries() {\n        return Object.entries(__classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\"));\n    }\n    add(hbsName, jsName) {\n        __classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\")[hbsName] = jsName !== null && jsName !== void 0 ? jsName : hbsName;\n        if (!__classPrivateFieldGet(this, _ScopeLocals_locals, \"f\").includes(hbsName)) {\n            __classPrivateFieldGet(this, _ScopeLocals_locals, \"f\").push(hbsName);\n        }\n    }\n    // this AST transform discovers all possible upvars in HBS that refer to valid\n    // bindings in JS, and then depending on the mode adjusts our actual scope bag\n    // contents.\n    crawl() {\n        return (_env) => {\n            let seen;\n            return {\n                name: 'scope-locals-crawl',\n                visitor: {\n                    Template: {\n                        enter: () => {\n                            seen = new Set();\n                        },\n                        exit: (_node, _path) => {\n                            if (__classPrivateFieldGet(this, _ScopeLocals_params, \"f\").mode === 'implicit') {\n                                // all hbs upvars that have matching JS bindings go into the\n                                // scope\n                                for (let name of seen) {\n                                    if (name === 'this') {\n                                        if (__classPrivateFieldGet(this, _ScopeLocals_params, \"f\").mayUseLexicalThis) {\n                                            this.add(name);\n                                        }\n                                    }\n                                    else if (__classPrivateFieldGet(this, _ScopeLocals_instances, \"m\", _ScopeLocals_isInJsScope).call(this, name, __classPrivateFieldGet(this, _ScopeLocals_params, \"f\").jsPath)) {\n                                        this.add(name);\n                                    }\n                                }\n                            }\n                            else {\n                                // in explicit form, we might prune back the preexising scope in\n                                // the case where another AST transform has eliminated the use\n                                // of the original binding. But we don't add anything new. The\n                                // only way for new bindings to be introduced into scope is for\n                                // another AST transform to explicitly call the jsutils, which\n                                // calls our `add`.\n                                for (let name of Object.keys(__classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\"))) {\n                                    if (!seen.has(name)) {\n                                        __classPrivateFieldGet(this, _ScopeLocals_locals, \"f\").splice(__classPrivateFieldGet(this, _ScopeLocals_locals, \"f\").indexOf(name), 1);\n                                        delete __classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\")[name];\n                                    }\n                                }\n                            }\n                        },\n                    },\n                    PathExpression: (node, path) => {\n                        switch (node.head.type) {\n                            case 'ThisHead':\n                                if (!(0, hbs_utils_1.astNodeHasBinding)(path, 'this')) {\n                                    seen.add('this');\n                                }\n                                break;\n                            case 'VarHead': {\n                                const name = node.head.name;\n                                if (!(0, hbs_utils_1.astNodeHasBinding)(path, name)) {\n                                    seen.add(name);\n                                }\n                            }\n                        }\n                    },\n                    ElementNode: (node, path) => {\n                        const name = node.tag.split('.')[0];\n                        if (!(0, hbs_utils_1.astNodeHasBinding)(path, name)) {\n                            seen.add(name);\n                        }\n                    },\n                },\n            };\n        };\n    }\n}\nexports.ScopeLocals = ScopeLocals;\n_ScopeLocals_mapping = new WeakMap(), _ScopeLocals_locals = new WeakMap(), _ScopeLocals_params = new WeakMap(), _ScopeLocals_instances = new WeakSet(), _ScopeLocals_isInJsScope = function _ScopeLocals_isInJsScope(hbsName, jsPath) {\n    var _a;\n    let jsName = (_a = __classPrivateFieldGet(this, _ScopeLocals_mapping, \"f\")[hbsName]) !== null && _a !== void 0 ? _a : hbsName;\n    return exports.ALLOWED_GLOBALS.has(jsName) || jsPath.scope.getBinding(jsName);\n};\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressionParser = void 0;\nconst scope_locals_1 = require(\"./scope-locals\");\nclass ExpressionParser {\n    constructor(babel) {\n        this.babel = babel;\n    }\n    parseExpression(invokedName, path) {\n        switch (path.node.type) {\n            case 'ObjectExpression':\n                return this.parseObjectExpression(invokedName, path);\n            case 'ArrayExpression': {\n                return this.parseArrayExpression(invokedName, path);\n            }\n            case 'StringLiteral':\n            case 'BooleanLiteral':\n            case 'NumericLiteral':\n                return path.node.value;\n            default:\n                throw path.buildCodeFrameError(`${invokedName} can only accept static options but you passed ${JSON.stringify(path.node)}`);\n        }\n    }\n    parseArrayExpression(invokedName, path) {\n        return path.get('elements').map((element) => {\n            if (element.isSpreadElement()) {\n                throw element.buildCodeFrameError(`spread element is not allowed here`);\n            }\n            else if (element.isExpression()) {\n                return this.parseExpression(invokedName, element);\n            }\n            return null;\n        });\n    }\n    parseScope(invokedName, path) {\n        let body = undefined;\n        if (path.node.type === 'ObjectMethod') {\n            body = path.node.body;\n        }\n        else {\n            let { value } = path.node;\n            if (this.t.isObjectExpression(value)) {\n                throw path.buildCodeFrameError(`Passing an object as the \\`scope\\` property to inline templates is no longer supported. Please pass a function that returns an object expression instead.`);\n            }\n            if (this.t.isFunctionExpression(value) || this.t.isArrowFunctionExpression(value)) {\n                body = value.body;\n            }\n        }\n        let objExpression = undefined;\n        if ((body === null || body === void 0 ? void 0 : body.type) === 'ObjectExpression') {\n            objExpression = body;\n        }\n        else if ((body === null || body === void 0 ? void 0 : body.type) === 'BlockStatement') {\n            // SAFETY: We know that the body is a ReturnStatement because we're checking inside\n            let returnStatements = body.body.filter((statement) => statement.type === 'ReturnStatement');\n            if (returnStatements.length !== 1) {\n                throw new Error('Scope functions must have a single return statement which returns an object expression containing references to in-scope values');\n            }\n            objExpression = returnStatements[0].argument;\n        }\n        if ((objExpression === null || objExpression === void 0 ? void 0 : objExpression.type) !== 'ObjectExpression') {\n            throw path.buildCodeFrameError(`Scope objects for \\`${invokedName}\\` must be an object expression containing only references to in-scope values, or a function that returns an object expression containing only references to in-scope values`);\n        }\n        return objExpression.properties.reduce((res, prop) => {\n            if (this.t.isSpreadElement(prop)) {\n                throw path.buildCodeFrameError(`Scope objects for \\`${invokedName}\\` may not contain spread elements`);\n            }\n            if (this.t.isObjectMethod(prop)) {\n                throw path.buildCodeFrameError(`Scope objects for \\`${invokedName}\\` may not contain methods`);\n            }\n            let { key, value } = prop;\n            if (!this.t.isStringLiteral(key) && !this.t.isIdentifier(key)) {\n                throw path.buildCodeFrameError(`Scope objects for \\`${invokedName}\\` may only contain static property names`);\n            }\n            let propName = name(key);\n            switch (value.type) {\n                case 'Identifier':\n                    res.add(propName, value.name);\n                    break;\n                case 'ThisExpression':\n                    res.add(propName, 'this');\n                    break;\n                default:\n                    throw path.buildCodeFrameError(`Scope objects for \\`${invokedName}\\` may only contain direct references to in-scope values, e.g. { ${propName} } or { ${propName}: ${propName} }. Found ${value.type}`);\n            }\n            return res;\n        }, new scope_locals_1.ScopeLocals({ mode: 'explicit' }));\n    }\n    parseEval(invokedName, path) {\n        let body;\n        if (path.isObjectMethod()) {\n            body = path.get('body');\n        }\n        else if (path.isObjectProperty()) {\n            let value = path.get('value');\n            if (value.isFunctionExpression()) {\n                body = value.get('body');\n            }\n            else {\n                throw path.buildCodeFrameError(`unsupported syntax for \\`eval\\` parameter to \\`${invokedName}\\`. It must be an object method or a function.`);\n            }\n        }\n        else {\n            throw path.buildCodeFrameError(`unsupported syntax for \\`eval\\` parameter to \\`${invokedName}\\`. It must be an object method or a function.`);\n        }\n        let returnStatements = body\n            .get('body')\n            .filter((statement) => statement.isReturnStatement());\n        if (returnStatements.length !== 1) {\n            throw body.buildCodeFrameError('eval function must have a single return statement');\n        }\n        let returnExpression = returnStatements[0].get('argument');\n        if (!returnExpression.isCallExpression()) {\n            throw returnStatements[0].buildCodeFrameError('eval function must return `eval(arguments[0])`. Found non-CallExpression.');\n        }\n        let callee = returnExpression.get('callee');\n        if (!callee.isIdentifier() || callee.node.name !== 'eval') {\n            throw returnExpression.buildCodeFrameError('eval function must return `eval(arguments[0])`. Found callee is not eval.');\n        }\n        let args = returnExpression.get('arguments');\n        if (args.length !== 1) {\n            throw returnExpression.buildCodeFrameError('eval function must return `eval(arguments[0])`. Found incorrect number of arguments.');\n        }\n        let arg = args[0];\n        if (!arg.isMemberExpression()) {\n            throw arg.buildCodeFrameError('eval function must return `eval(arguments[0])`. Found argument is non-MemberExpression.');\n        }\n        let obj = arg.get('object');\n        if (!obj.isIdentifier() || obj.node.name !== 'arguments') {\n            throw obj.buildCodeFrameError('eval function must return `eval(arguments[0])`. Found wrong argument to eval.');\n        }\n        let prop = arg.get('property');\n        if (!prop.isNumericLiteral() || prop.node.value !== 0) {\n            throw prop.buildCodeFrameError('eval function must return `eval(arguments[0])`. Found wrong property.');\n        }\n        return { isEval: true };\n    }\n    parseObjectExpression(invokedName, path, shouldParseScope = false, shouldSupportRFC931 = false) {\n        let result = {};\n        path.get('properties').forEach((property) => {\n            let { node } = property;\n            if (this.t.isSpreadElement(node)) {\n                throw property.buildCodeFrameError(`${invokedName} does not allow spread element`);\n            }\n            if (node.computed) {\n                throw property.buildCodeFrameError(`${invokedName} can only accept static property names`);\n            }\n            let { key } = node;\n            if (!this.t.isIdentifier(key) && !this.t.isStringLiteral(key)) {\n                throw property.buildCodeFrameError(`${invokedName} can only accept static property names`);\n            }\n            let propertyName = name(key);\n            if (shouldParseScope && propertyName === 'scope') {\n                result.scope = this.parseScope(invokedName, property);\n            }\n            else if (shouldSupportRFC931 && propertyName === 'eval') {\n                result.eval = this.parseEval(invokedName, property);\n            }\n            else if (shouldSupportRFC931 && propertyName === 'component') {\n                result.component = property.get('value');\n            }\n            else {\n                if (this.t.isObjectMethod(node)) {\n                    throw property.buildCodeFrameError(`${invokedName} does not accept a method for ${propertyName}`);\n                }\n                let valuePath = property.get('value');\n                if (!valuePath.isExpression()) {\n                    throw valuePath.buildCodeFrameError(`must be an expression`);\n                }\n                result[propertyName] = this.parseExpression(invokedName, valuePath);\n            }\n        });\n        return result;\n    }\n    get t() {\n        return this.babel.types;\n    }\n}\nexports.ExpressionParser = ExpressionParser;\nfunction name(node) {\n    if (node.type === 'StringLiteral') {\n        return node.value;\n    }\n    else {\n        return node.name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _JSUtils_instances, _JSUtils_babel, _JSUtils_state, _JSUtils_template, _JSUtils_addedBinding, _JSUtils_importer, _JSUtils_emitStatement, _JSUtils_parseExpression, _ExpressionContext_importer, _ExpressionContext_target;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSUtils = void 0;\nconst hbs_utils_1 = require(\"./hbs-utils\");\n// This exists to give AST plugins a controlled interface for influencing the\n// surrounding Javascript scope\nclass JSUtils {\n    constructor(babel, state, template, addedBinding, importer) {\n        _JSUtils_instances.add(this);\n        _JSUtils_babel.set(this, void 0);\n        _JSUtils_state.set(this, void 0);\n        _JSUtils_template.set(this, void 0);\n        _JSUtils_addedBinding.set(this, void 0);\n        _JSUtils_importer.set(this, void 0);\n        __classPrivateFieldSet(this, _JSUtils_babel, babel, \"f\");\n        __classPrivateFieldSet(this, _JSUtils_state, state, \"f\");\n        __classPrivateFieldSet(this, _JSUtils_template, template, \"f\");\n        __classPrivateFieldSet(this, _JSUtils_addedBinding, addedBinding, \"f\");\n        __classPrivateFieldSet(this, _JSUtils_importer, importer, \"f\");\n        if (!__classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath) {\n            let target;\n            for (let statement of __classPrivateFieldGet(this, _JSUtils_state, \"f\").program.get('body')) {\n                if (!statement.isImportDeclaration()) {\n                    break;\n                }\n                target = statement;\n            }\n            if (target) {\n                __classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath = target;\n            }\n        }\n    }\n    /**\n     * Create a new binding that you can use in your template, initialized with\n     * the given Javascript expression.\n     *\n     * @param { Expression } expression A javascript expression whose value will\n     * initialize your new binding. See docs on the Expression type for details.\n     * @param target The location within your template where the binding will be\n     * used. This matters so we can avoid naming collisions.\n     * @param opts.nameHint Optionally, provide a descriptive name for your new\n     * binding. We will mangle this name as needed to avoid collisions, but\n     * picking a good name here can aid in debugging.\n     *\n     * @return The name you can use in your template to access the binding.\n     */\n    bindExpression(expression, target, opts) {\n        var _a;\n        let name = unusedNameLike((_a = opts === null || opts === void 0 ? void 0 : opts.nameHint) !== null && _a !== void 0 ? _a : 'a', (candidate) => __classPrivateFieldGet(this, _JSUtils_template, \"f\").scope.hasBinding(candidate) || (0, hbs_utils_1.astNodeHasBinding)(target, candidate));\n        let t = __classPrivateFieldGet(this, _JSUtils_babel, \"f\").types;\n        let declaration = __classPrivateFieldGet(this, _JSUtils_instances, \"m\", _JSUtils_emitStatement).call(this, t.variableDeclaration('let', [\n            t.variableDeclarator(t.identifier(name), __classPrivateFieldGet(this, _JSUtils_instances, \"m\", _JSUtils_parseExpression).call(this, __classPrivateFieldGet(this, _JSUtils_state, \"f\").program, expression)),\n        ]));\n        declaration.scope.registerBinding('let', declaration.get('declarations.0'));\n        __classPrivateFieldGet(this, _JSUtils_addedBinding, \"f\").call(this, name);\n        return name;\n    }\n    /**\n     * Gain access to an imported value within your template.\n     *\n     * @param moduleSpecifier The path to import from.\n     * @param exportedName The named export you wish to access, or \"default\" for\n     * the default export, or \"*\" for the namespace export.\n     * @param target The location within your template where the binding will be\n     * used. This matters so we can avoid naming collisions.\n     * @param opts.nameHint Optionally, provide a descriptive name for your new\n     * binding. We will mangle this name as needed to avoid collisions, but\n     * picking a good name here can aid in debugging.\n     *\n     * @return The name you can use in your template to access the imported value.\n     */\n    bindImport(moduleSpecifier, exportedName, target, opts) {\n        // This will discover or create the local name for accessing the given import.\n        let importedIdentifier = __classPrivateFieldGet(this, _JSUtils_importer, \"f\").import(__classPrivateFieldGet(this, _JSUtils_template, \"f\"), moduleSpecifier, exportedName, opts === null || opts === void 0 ? void 0 : opts.nameHint);\n        // Simple base case: the JS name that's available is also unused at our spot\n        // in HBS, so just use it.\n        if (!(0, hbs_utils_1.astNodeHasBinding)(target, importedIdentifier.name)) {\n            __classPrivateFieldGet(this, _JSUtils_addedBinding, \"f\").call(this, importedIdentifier.name);\n            return importedIdentifier.name;\n        }\n        // The importedIdentifier that we have in Javascript is not usable within\n        // our HBS because it's shadowed by a block param. So we will introduce a\n        // second name via a variable declaration.\n        //\n        // The reason we don't force the import itself to have this name is that\n        // we might be re-using an existing import, and we don't want to go\n        // rewriting all of its callsites that are unrelated to us.\n        let identifier = unusedNameLike(importedIdentifier.name, (candidate) => __classPrivateFieldGet(this, _JSUtils_template, \"f\").scope.hasBinding(candidate) || (0, hbs_utils_1.astNodeHasBinding)(target, candidate));\n        let t = __classPrivateFieldGet(this, _JSUtils_babel, \"f\").types;\n        let declaration = __classPrivateFieldGet(this, _JSUtils_instances, \"m\", _JSUtils_emitStatement).call(this, t.variableDeclaration('let', [\n            t.variableDeclarator(t.identifier(identifier), importedIdentifier),\n        ]));\n        declaration.scope.registerBinding('let', declaration.get('declarations.0'));\n        __classPrivateFieldGet(this, _JSUtils_addedBinding, \"f\").call(this, identifier);\n        return identifier;\n    }\n    /**\n     * Add an import statement purely for side effect.\n     *\n     * @param moduleSpecifier the module to import\n     */\n    importForSideEffect(moduleSpecifier) {\n        __classPrivateFieldGet(this, _JSUtils_importer, \"f\").importForSideEffect(moduleSpecifier);\n    }\n    /**\n     * Emit a javascript expresison for side-effect. This only accepts\n     * expressions, not statements, because you should not introduce new bindings.\n     * To introduce a binding see bindExpression or bindImport instead.\n     *\n     * @param { Expression } expression A javascript expression whose value will\n     * initialize your new binding. See docs on the Expression type below for\n     * details.\n     */\n    emitExpression(expression) {\n        let t = __classPrivateFieldGet(this, _JSUtils_babel, \"f\").types;\n        __classPrivateFieldGet(this, _JSUtils_instances, \"m\", _JSUtils_emitStatement).call(this, t.expressionStatement(__classPrivateFieldGet(this, _JSUtils_instances, \"m\", _JSUtils_parseExpression).call(this, __classPrivateFieldGet(this, _JSUtils_state, \"f\").program, expression)));\n    }\n}\nexports.JSUtils = JSUtils;\n_JSUtils_babel = new WeakMap(), _JSUtils_state = new WeakMap(), _JSUtils_template = new WeakMap(), _JSUtils_addedBinding = new WeakMap(), _JSUtils_importer = new WeakMap(), _JSUtils_instances = new WeakSet(), _JSUtils_emitStatement = function _JSUtils_emitStatement(statement) {\n    if (__classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath) {\n        __classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath = __classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath.insertAfter(statement)[0];\n    }\n    else {\n        __classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath = __classPrivateFieldGet(this, _JSUtils_state, \"f\").program.unshiftContainer('body', statement)[0];\n    }\n    return __classPrivateFieldGet(this, _JSUtils_state, \"f\").lastInsertedPath;\n}, _JSUtils_parseExpression = function _JSUtils_parseExpression(target, expression) {\n    let expressionString;\n    if (typeof expression === 'string') {\n        expressionString = expression;\n    }\n    else {\n        expressionString = expression(new ExpressionContext(__classPrivateFieldGet(this, _JSUtils_importer, \"f\"), target));\n    }\n    let parsed = __classPrivateFieldGet(this, _JSUtils_babel, \"f\").parse(expressionString);\n    if (!parsed) {\n        throw new Error(`JSUtils.bindExpression could not understand the expression: ${expressionString}`);\n    }\n    let statements = body(parsed);\n    if (statements.length !== 1) {\n        throw new Error(`JSUtils.bindExpression expected to find exactly one expression but found ${statements.length} in: ${expressionString}`);\n    }\n    let statement = statements[0];\n    if (statement.type !== 'ExpressionStatement') {\n        throw new Error(`JSUtils.bindExpression expected to find an expression but found ${statement.type} in: ${expressionString}`);\n    }\n    return statement.expression;\n};\nfunction unusedNameLike(desiredName, isUsed) {\n    let candidate = desiredName;\n    let counter = 0;\n    while (isUsed(candidate)) {\n        candidate = `${desiredName}${counter++}`;\n    }\n    return candidate;\n}\nfunction body(node) {\n    if (node.type === 'File') {\n        return node.program.body;\n    }\n    else {\n        return node.body;\n    }\n}\n/**\n * Allows you to construct an expression that relies on imported values.\n */\nclass ExpressionContext {\n    constructor(importer, target) {\n        _ExpressionContext_importer.set(this, void 0);\n        _ExpressionContext_target.set(this, void 0);\n        __classPrivateFieldSet(this, _ExpressionContext_importer, importer, \"f\");\n        __classPrivateFieldSet(this, _ExpressionContext_target, target, \"f\");\n    }\n    /**\n     * Find or create a local binding for the given import.\n     *\n     * @param moduleSpecifier The path to import from.\n     * @param exportedName The named export you wish to access, or \"default\" for\n     * the default export, or \"*\" for the namespace export.\n     * @param nameHint Optionally, provide a descriptive name for your new\n     * binding. We will mangle this name as needed to avoid collisions, but\n     * picking a good name here can aid in debugging.\n  \n     * @return the local identifier for the imported value\n     */\n    import(moduleSpecifier, exportedName, nameHint) {\n        // this method in babel-import-util is the lower-level one that doesn't try\n        // to create valid references for us. It's our responsibility to do so. But\n        // that's OK here, because we have the same responsibility for every\n        // scope-bag identifier, not just the imported ones, and it will be easier\n        // to handle them all at once.\n        return __classPrivateFieldGet(this, _ExpressionContext_importer, \"f\").import(__classPrivateFieldGet(this, _ExpressionContext_target, \"f\"), moduleSpecifier, exportedName, nameHint).name;\n    }\n}\n_ExpressionContext_importer = new WeakMap(), _ExpressionContext_target = new WeakMap();\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makePlugin = makePlugin;\nconst babel_import_util_1 = require(\"babel-import-util\");\nconst expression_parser_1 = require(\"./expression-parser\");\nconst js_utils_1 = require(\"./js-utils\");\nconst scope_locals_1 = require(\"./scope-locals\");\nconst syntax_1 = require(\"@glimmer/syntax\");\n__exportStar(require(\"./public-types\"), exports);\nconst INLINE_PRECOMPILE_MODULES = [\n    {\n        moduleName: 'ember-cli-htmlbars',\n        export: 'hbs',\n        allowTemplateLiteral: true,\n    },\n    {\n        moduleName: 'ember-cli-htmlbars-inline-precompile',\n        export: 'default',\n        allowTemplateLiteral: true,\n    },\n    {\n        moduleName: 'htmlbars-inline-precompile',\n        export: 'default',\n        allowTemplateLiteral: true,\n    },\n    {\n        moduleName: '@ember/template-compilation',\n        export: 'precompileTemplate',\n        enableScope: true,\n    },\n    {\n        moduleName: '@ember/template-compiler',\n        export: 'template',\n        enableScope: true,\n        rfc931Support: 'polyfilled',\n    },\n];\nfunction normalizeOpts(options) {\n    var _a;\n    if (((_a = options.targetFormat) !== null && _a !== void 0 ? _a : 'wire') === 'wire') {\n        let { compiler } = options;\n        if (!compiler) {\n            throw new Error(`when targetFormat===\"wire\" you must set the compiler or compilerPath option`);\n        }\n        return Object.assign(Object.assign({ outputModuleOverrides: {}, enableLegacyModules: [], transforms: [] }, options), { targetFormat: 'wire', compiler });\n    }\n    else {\n        return Object.assign(Object.assign({ outputModuleOverrides: {}, enableLegacyModules: [], transforms: [] }, options), { targetFormat: 'hbs' });\n    }\n}\nfunction makePlugin(loadOptions) {\n    return function htmlbarsInlinePrecompile(babel) {\n        let t = babel.types;\n        const plugin = {\n            visitor: {\n                Program: {\n                    enter(path, state) {\n                        state.normalizedOpts = normalizeOpts(loadOptions(state.opts));\n                        state.templateFactory = templateFactoryConfig(state.normalizedOpts);\n                        state.util = new babel_import_util_1.ImportUtil(babel, path);\n                        state.program = path;\n                        state.recursionGuard = new Set();\n                    },\n                    exit(_path, state) {\n                        if (state.normalizedOpts.targetFormat === 'wire') {\n                            for (let { moduleName, export: exportName } of configuredModules(state)) {\n                                state.util.removeImport(moduleName, exportName);\n                            }\n                        }\n                    },\n                },\n                TaggedTemplateExpression(path, state) {\n                    let tagPath = path.get('tag');\n                    if (!tagPath.isIdentifier()) {\n                        return;\n                    }\n                    let config = referencesInlineCompiler(tagPath, state);\n                    if (!config) {\n                        return;\n                    }\n                    if (!config.allowTemplateLiteral) {\n                        throw path.buildCodeFrameError(`Attempted to use \\`${tagPath.node.name}\\` as a template tag, but it can only be called as a function with a string passed to it: ${tagPath.node.name}('content here')`);\n                    }\n                    if (path.node.quasi.expressions.length) {\n                        throw path.buildCodeFrameError('placeholders inside a tagged template string are not supported');\n                    }\n                    let template = path.node.quasi.quasis.map((quasi) => quasi.value.cooked).join('');\n                    if (state.normalizedOpts.targetFormat === 'wire') {\n                        insertCompiledTemplate(babel, state, state.normalizedOpts, template, path, {}, config, undefined);\n                    }\n                    else {\n                        insertTransformedTemplate(babel, state, template, path, {}, config, undefined);\n                    }\n                },\n                CallExpression(path, state) {\n                    let calleePath = path.get('callee');\n                    if (!calleePath.isIdentifier()) {\n                        return;\n                    }\n                    let config = referencesInlineCompiler(calleePath, state);\n                    if (!config) {\n                        return;\n                    }\n                    if (state.recursionGuard.has(path.node)) {\n                        return;\n                    }\n                    if (path.get('arguments').length > 2) {\n                        throw path.buildCodeFrameError(`${calleePath.node.name} can only be invoked with 2 arguments: the template string and any static options`);\n                    }\n                    let [firstArg, secondArg] = path.get('arguments');\n                    let template;\n                    switch (firstArg === null || firstArg === void 0 ? void 0 : firstArg.node.type) {\n                        case 'StringLiteral':\n                            template = firstArg.node.value;\n                            break;\n                        case 'TemplateLiteral':\n                            if (firstArg.node.expressions.length) {\n                                throw path.buildCodeFrameError('placeholders inside a template string are not supported');\n                            }\n                            else {\n                                template = firstArg.node.quasis.map((quasi) => quasi.value.cooked).join('');\n                            }\n                            break;\n                        case 'TaggedTemplateExpression':\n                            throw path.buildCodeFrameError(`tagged template strings inside ${calleePath.node.name} are not supported`);\n                        default:\n                            throw path.buildCodeFrameError(`${calleePath.node.name} should be invoked with at least a single argument (the template string)`);\n                    }\n                    let userTypedOptions;\n                    let backingClass;\n                    if (!secondArg) {\n                        userTypedOptions = {};\n                    }\n                    else {\n                        if (!secondArg.isObjectExpression()) {\n                            throw path.buildCodeFrameError(`${calleePath.node.name} can only be invoked with 2 arguments: the template string, and any static options`);\n                        }\n                        userTypedOptions = new expression_parser_1.ExpressionParser(babel).parseObjectExpression(calleePath.node.name, secondArg, config.enableScope, Boolean(config.rfc931Support));\n                        if (config.rfc931Support && userTypedOptions.component) {\n                            backingClass = userTypedOptions.component;\n                        }\n                    }\n                    if (state.normalizedOpts.targetFormat === 'wire') {\n                        insertCompiledTemplate(babel, state, state.normalizedOpts, template, path, userTypedOptions, config, backingClass);\n                    }\n                    else {\n                        insertTransformedTemplate(babel, state, template, path, userTypedOptions, config, backingClass);\n                    }\n                },\n            },\n        };\n        return {\n            pre(file) {\n                // run our processing in pre so that imports for gts\n                // are kept for other plugins.\n                babel.traverse(file.ast, plugin.visitor, file.scope, this);\n            },\n            visitor: {},\n        };\n    };\n}\nfunction* configuredModules(state) {\n    for (let moduleConfig of INLINE_PRECOMPILE_MODULES) {\n        if (moduleConfig.moduleName !== '@ember/template-compilation' &&\n            moduleConfig.moduleName !== '@ember/template-compiler' &&\n            !state.normalizedOpts.enableLegacyModules.includes(moduleConfig.moduleName)) {\n            continue;\n        }\n        yield moduleConfig;\n    }\n}\nfunction referencesInlineCompiler(path, state) {\n    for (let moduleConfig of configuredModules(state)) {\n        if (path.referencesImport(moduleConfig.moduleName, moduleConfig.export)) {\n            return moduleConfig;\n        }\n    }\n    return undefined;\n}\nfunction runtimeErrorIIFE(babel, replacements) {\n    let statement = babel.template(`(function() {\\n  throw new Error('ERROR_MESSAGE');\\n})();`)(replacements);\n    return statement.expression;\n}\nfunction buildScopeLocals(userTypedOptions, formatOptions, target, mayUseLexicalThis) {\n    if (formatOptions.rfc931Support && userTypedOptions.eval) {\n        return new scope_locals_1.ScopeLocals({ mode: 'implicit', jsPath: target, mayUseLexicalThis });\n    }\n    else if (userTypedOptions.scope) {\n        return userTypedOptions.scope;\n    }\n    else {\n        return new scope_locals_1.ScopeLocals({ mode: 'explicit' });\n    }\n}\nfunction buildPrecompileOptions(babel, target, state, template, userTypedOptions, config, scope) {\n    let jsutils = new js_utils_1.JSUtils(babel, state, target, scope.add.bind(scope), state.util);\n    let meta = Object.assign({ jsutils }, userTypedOptions === null || userTypedOptions === void 0 ? void 0 : userTypedOptions.meta);\n    let output = {\n        contents: template,\n        // we've extended meta to add jsutils, but the types in @glimmer/syntax\n        // don't account for extension\n        meta: meta,\n        // TODO: embroider's template-compiler allows this to be overriden to get\n        // backward-compatible module names that don't match the real name of the\n        // on-disk file. What's our plan for migrating people away from that?\n        moduleName: state.filename,\n        // This is here so it's *always* the real filename. Historically, there is\n        // also `moduleName` but that did not match the real on-disk filename, it\n        // was the notional runtime module name from classic ember builds.\n        filename: state.filename,\n        plugins: {\n            // the cast is needed here only because our meta is extended. That is,\n            // these plugins can access meta.jsutils.\n            ast: [...state.normalizedOpts.transforms, scope.crawl()],\n        },\n    };\n    for (let [key, value] of Object.entries(userTypedOptions)) {\n        if (key !== 'scope') {\n            // `scope` in the user-facing API becomes `locals` in the low-level\n            // ember-template-compiler API\n            output[key] = value;\n        }\n    }\n    output.locals = scope.locals;\n    if (config.rfc931Support) {\n        output.strictMode = true;\n    }\n    return output;\n}\nfunction remapAndBindIdentifiers(target, babel, scopeLocals) {\n    target.traverse({\n        Identifier(path) {\n            var _a;\n            if (scopeLocals.has(path.node.name) && path.node.name !== scopeLocals.get(path.node.name)) {\n                // this identifier has different names in hbs vs js, so we need to\n                // replace the hbs name in the template compiler output with the js\n                // name\n                path.replaceWith(babel.types.identifier(scopeLocals.get(path.node.name)));\n            }\n            // this is where we tell babel's scope system about the new reference we\n            // just introduced. @babel/plugin-transform-typescript in particular\n            // cares a lot about those references being present.\n            (_a = path.scope.getBinding(path.node.name)) === null || _a === void 0 ? void 0 : _a.reference(path);\n        },\n    });\n}\nfunction insertCompiledTemplate(babel, state, opts, template, target, userTypedOptions, config, backingClass) {\n    let t = babel.types;\n    let scopeLocals = buildScopeLocals(userTypedOptions, config, target, !backingClass);\n    let options = buildPrecompileOptions(babel, target, state, template, userTypedOptions, config, scopeLocals);\n    let precompileResultString;\n    // insertRuntimeErrors is legacy and not supported by the newer rfc931 form\n    if (options.insertRuntimeErrors && !config.rfc931Support) {\n        try {\n            precompileResultString = opts.compiler.precompile(template, options);\n        }\n        catch (error) {\n            target.replaceWith(runtimeErrorIIFE(babel, { ERROR_MESSAGE: error.message }));\n            return;\n        }\n    }\n    else {\n        precompileResultString = opts.compiler.precompile(template, options);\n    }\n    let templateExpression = babel.template.expression.ast(precompileResultString);\n    t.addComment(templateExpression, 'leading', `\\n  ${template.replace(/\\*\\//g, '*\\\\/')}\\n`, \n    /* line comment? */ false);\n    state.util.replaceWith(target, (i) => {\n        var _a;\n        let templateFactoryIdentifier = i.import(state.templateFactory.moduleName, state.templateFactory.exportName);\n        let expression = t.callExpression(templateFactoryIdentifier, [templateExpression]);\n        if (config.rfc931Support) {\n            expression = t.callExpression(i.import('@ember/component', 'setComponentTemplate'), [\n                expression,\n                (_a = backingClass === null || backingClass === void 0 ? void 0 : backingClass.node) !== null && _a !== void 0 ? _a : t.callExpression(i.import('@ember/component/template-only', 'default', 'templateOnly'), []),\n            ]);\n        }\n        return expression;\n    });\n    remapAndBindIdentifiers(target, babel, scopeLocals);\n}\nfunction insertTransformedTemplate(babel, state, template, target, userTypedOptions, formatOptions, backingClass) {\n    let t = babel.types;\n    let scopeLocals = buildScopeLocals(userTypedOptions, formatOptions, target, !backingClass);\n    let options = buildPrecompileOptions(babel, target, state, template, userTypedOptions, formatOptions, scopeLocals);\n    let ast = (0, syntax_1.preprocess)(template, Object.assign(Object.assign({}, options), { mode: 'codemod' }));\n    let transformed = (0, syntax_1.print)(ast, { entityEncoding: 'raw' });\n    if (target.isCallExpression()) {\n        updateCallForm(target, transformed, formatOptions, scopeLocals, state, babel, backingClass);\n    }\n    else {\n        updateBacktickForm(scopeLocals, state, target, t, transformed, babel);\n    }\n}\nfunction updateBacktickForm(scopeLocals, state, target, t, transformed, babel) {\n    if (scopeLocals.isEmpty()) {\n        // simple case: just replace the string literal part with the transformed\n        // template contents\n        target.get('quasi').get('quasis.0').replaceWith(t.templateElement({ raw: transformed }));\n        return;\n    }\n    // need to add scope, so need to replace the backticks form with a call\n    // expression to precompileTemplate\n    maybePruneImport(state.util, target.get('tag'));\n    let newCall = state.util.replaceWith(target, (i) => t.callExpression(precompileTemplate(i), [t.stringLiteral(transformed)]));\n    updateScope(babel, newCall, scopeLocals);\n}\nfunction updateCallForm(target, transformed, formatOptions, scopeLocals, state, babel, backingClass) {\n    // first the simple part: replacing the string literal with the actual body of\n    // the rewritten template\n    target.get('arguments.0').replaceWith(babel.types.stringLiteral(transformed));\n    if (!formatOptions.enableScope && !scopeLocals.isEmpty()) {\n        // an AST transform added lexically scoped values to a template that\n        // wasn't already in a form that supports them, so convert form.\n        maybePruneImport(state.util, target.get('callee'));\n        state.util.replaceWith(target.get('callee'), (i) => precompileTemplate(i));\n    }\n    if (formatOptions.rfc931Support === 'polyfilled') {\n        maybePruneImport(state.util, target.get('callee'));\n        state.util.replaceWith(target.get('callee'), (i) => precompileTemplate(i));\n        convertStrictMode(babel, target);\n        removeEvalAndScope(target);\n        target.node.arguments = target.node.arguments.slice(0, 2);\n        state.recursionGuard.add(target.node);\n        state.util.replaceWith(target, (i) => {\n            var _a;\n            return babel.types.callExpression(i.import('@ember/component', 'setComponentTemplate'), [\n                target.node,\n                (_a = backingClass === null || backingClass === void 0 ? void 0 : backingClass.node) !== null && _a !== void 0 ? _a : babel.types.callExpression(i.import('@ember/component/template-only', 'default', 'templateOnly'), []),\n            ]);\n        });\n        // we just wrapped the target callExpression in the call to\n        // setComponentTemplate. Adjust `target` back to point at the\n        // precompileTemplate call for the final updateScope below.\n        //\n        target = target.get('arguments.0');\n    }\n    // We deliberately do updateScope at the end so that when it updates\n    // references, those references will point to the accurate paths in the\n    // final AST.\n    updateScope(babel, target, scopeLocals);\n}\nfunction templateFactoryConfig(opts) {\n    var _a;\n    let moduleName = '@ember/template-factory';\n    let exportName = 'createTemplateFactory';\n    let overrides = (_a = opts.outputModuleOverrides[moduleName]) === null || _a === void 0 ? void 0 : _a[exportName];\n    return overrides\n        ? { exportName: overrides[0], moduleName: overrides[1] }\n        : { exportName, moduleName };\n}\nfunction buildScope(babel, locals) {\n    let t = babel.types;\n    return t.arrowFunctionExpression([], t.objectExpression(locals\n        .entries()\n        .map(([name, identifier]) => t.objectProperty(t.identifier(name), t.identifier(identifier), false, name !== 'this'))));\n}\n// this is responsible both for adjusting the AST for our scope argument *and*\n// ensuring that babel's scope system will see that these new identifiers\n// reference their bindings. @babel/plugin-transform-typescript in particular\n// cares an awful lot about whether an import has valid non-type references, so\n// these newly introducd references need to be valid.\nfunction updateScope(babel, target, locals) {\n    let t = babel.types;\n    let secondArg = target.get('arguments.1');\n    if (secondArg) {\n        let scope = secondArg.get('properties').find((p) => {\n            let key = p.get('key');\n            return key.isIdentifier() && key.node.name === 'scope';\n        });\n        if (scope) {\n            if (locals.isEmpty()) {\n                scope.remove();\n            }\n            else {\n                scope.set('value', buildScope(babel, locals));\n                // funny-looking naming here, but it actually makes sense because we're\n                // connecting the glimmer scope system with the babel scope system.\n                scope.scope.crawl();\n            }\n        }\n        else if (!locals.isEmpty()) {\n            secondArg.pushContainer('properties', t.objectProperty(t.identifier('scope'), buildScope(babel, locals)));\n            secondArg.get(`properties.${secondArg.node.properties.length - 1}`).scope.crawl();\n        }\n    }\n    else if (!locals.isEmpty()) {\n        target.pushContainer('arguments', t.objectExpression([t.objectProperty(t.identifier('scope'), buildScope(babel, locals))]));\n        target.get('arguments.1').scope.crawl();\n    }\n}\nfunction removeEvalAndScope(target) {\n    let secondArg = target.get('arguments.1');\n    if (secondArg) {\n        let evalProp = secondArg.get('properties').find((p) => {\n            let key = p.get('key');\n            return key.isIdentifier() && key.node.name === 'eval';\n        });\n        if (evalProp) {\n            evalProp.remove();\n        }\n        let componentProp = secondArg.get('properties').find((p) => {\n            let key = p.get('key');\n            return key.isIdentifier() && key.node.name === 'component';\n        });\n        if (componentProp) {\n            componentProp.remove();\n        }\n    }\n}\n// Given a call to template(), convert its \"strict\" argument into\n// precompileTemplate's \"strictMode\" argument. They differ in name and default\n// value.\nfunction convertStrictMode(babel, target) {\n    let t = babel.types;\n    let secondArg = target.get('arguments.1');\n    if (secondArg) {\n        let strict = secondArg.get('properties').find((p) => {\n            let key = p.get('key');\n            return key.isIdentifier() && key.node.name === 'strict';\n        });\n        if (strict) {\n            strict.set('key', t.identifier('strictMode'));\n        }\n        else {\n            secondArg.pushContainer('properties', t.objectProperty(t.identifier('strictMode'), t.booleanLiteral(true)));\n        }\n    }\n    else {\n        target.pushContainer('arguments', t.objectExpression([t.objectProperty(t.identifier('strictMode'), t.booleanLiteral(true))]));\n    }\n}\nfunction maybePruneImport(util, identifier) {\n    if (!identifier.isIdentifier()) {\n        return;\n    }\n    let binding = identifier.scope.getBinding(identifier.node.name);\n    if (!binding) {\n        return;\n    }\n    let found = binding.referencePaths.find((path) => path.node === identifier.node);\n    if (!found) {\n        return;\n    }\n    binding.referencePaths.splice(binding.referencePaths.indexOf(found), 1);\n    binding.references--;\n    if (binding.references === 0) {\n        let specifier = binding.path;\n        if (specifier.isImportSpecifier()) {\n            let declaration = specifier.parentPath;\n            util.removeImport(declaration.node.source.value, name(specifier.node.imported));\n        }\n    }\n}\nfunction precompileTemplate(i) {\n    return i.import('@ember/template-compilation', 'precompileTemplate');\n}\nfunction name(node) {\n    if (node.type === 'StringLiteral') {\n        return node.value;\n    }\n    else {\n        return node.name;\n    }\n}\nexports.default = makePlugin((options) => options);\n//# sourceMappingURL=data:application/json;base64,"],"names":["sanitize","identifier","cleaned","replace","RegExp","illegalChar","source","_m","letter","toUpperCase","exports","sanitize_1","require","ImportUtil","constructor","babel","program","t","types","removeImport","moduleSpecifier","exportedName","topLevelPath","get","matchModule","importSpecifierPath","find","specifierPath","matchSpecifier","node","specifiers","length","remove","removeAllImports","import","target","nameHint","unreferencedImport","desiredName","defaultNameHint","preferredName","isNamespaceImport","isDefaultImport","isNamedImport","declaration","findImportFrom","hasNamespaceSpecifier","s","type","hasNamedSpecifiers","cannotUseExistingDeclaration","specifier","spec","_a","scope","getBinding","local","name","kind","addSpecifier","insertAfterExistingImports","importDeclaration","stringLiteral","importForSideEffect","replaceWith","fn","mutate","i","insertAfter","insertBefore","symbols","Map","importer","set","updateReference","path","isIdentifier","hit","newIdentifier","binding","Error","reference","result","traverse","ReferencedIdentifier","unusedNameLike","buildSpecifier","added","unshift","push","registerBinding","localName","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","isImportDeclaration","value","importKind","undefined","statement","lastIndex","index","body","entries","splice","candidate","counter","hasBinding","generateUidIdentifierBasedOnNode","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","imported","astNodeHasBinding","cursor","parentNode","parent","blockParams","includes","children","readOnlyArray","mutationMethods","array","message","Proxy","prop","Reflect","_target","_prop","deleteProperty","hbs_utils_1","read_only_array_1","Set","ScopeLocals","params","_ScopeLocals_mapping","_ScopeLocals_locals","_ScopeLocals_params","__classPrivateFieldSet","locals","__classPrivateFieldGet","has","key","isEmpty","Object","add","hbsName","jsName","crawl","_env","seen","visitor","Template","enter","exit","_node","_path","mode","mayUseLexicalThis","_ScopeLocals_instances","_ScopeLocals_isInJsScope","call","jsPath","keys","indexOf","PathExpression","head","ElementNode","tag","split","ALLOWED_GLOBALS","scope_locals_1","ExpressionParser","parseExpression","invokedName","parseObjectExpression","parseArrayExpression","buildCodeFrameError","JSON","stringify","map","element","isSpreadElement","isExpression","parseScope","isObjectExpression","isFunctionExpression","isArrowFunctionExpression","objExpression","returnStatements","filter","argument","properties","reduce","res","isObjectMethod","isStringLiteral","propName","parseEval","isObjectProperty","isReturnStatement","returnExpression","isCallExpression","callee","args","arg","isMemberExpression","obj","isNumericLiteral","isEval","shouldParseScope","shouldSupportRFC931","forEach","property","computed","propertyName","eval","component","valuePath","JSUtils","state","template","addedBinding","_JSUtils_babel","_JSUtils_state","_JSUtils_template","_JSUtils_addedBinding","_JSUtils_importer","lastInsertedPath","bindExpression","expression","opts","_JSUtils_instances","_JSUtils_emitStatement","variableDeclaration","variableDeclarator","_JSUtils_parseExpression","bindImport","importedIdentifier","emitExpression","expressionStatement","unshiftContainer","expressionString","ExpressionContext","parsed","parse","statements","isUsed","_ExpressionContext_importer","_ExpressionContext_target","makePlugin","babel_import_util_1","expression_parser_1","js_utils_1","syntax_1","__exportStar","INLINE_PRECOMPILE_MODULES","moduleName","export","allowTemplateLiteral","enableScope","rfc931Support","normalizeOpts","options","targetFormat","compiler","assign","outputModuleOverrides","enableLegacyModules","transforms","loadOptions","htmlbarsInlinePrecompile","plugin","Program","normalizedOpts","templateFactory","templateFactoryConfig","util","recursionGuard","exportName","configuredModules","TaggedTemplateExpression","tagPath","config","referencesInlineCompiler","quasi","expressions","quasis","cooked","join","insertCompiledTemplate","insertTransformedTemplate","CallExpression","calleePath","firstArg","secondArg","userTypedOptions","backingClass","Boolean","pre","file","ast","moduleConfig","referencesImport","runtimeErrorIIFE","replacements","buildScopeLocals","formatOptions","buildPrecompileOptions","jsutils","bind","meta","output","contents","filename","plugins","strictMode","remapAndBindIdentifiers","scopeLocals","Identifier","precompileResultString","insertRuntimeErrors","precompile","error","ERROR_MESSAGE","templateExpression","addComment","templateFactoryIdentifier","callExpression","preprocess","transformed","print","entityEncoding","updateCallForm","updateBacktickForm","templateElement","raw","maybePruneImport","newCall","precompileTemplate","updateScope","convertStrictMode","removeEvalAndScope","arguments","slice","overrides","buildScope","arrowFunctionExpression","objectExpression","objectProperty","p","pushContainer","evalProp","componentProp","strict","booleanLiteral","found","referencePaths","references","parentPath"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}